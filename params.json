{"name":"Which","tagline":"","body":"Install\r\n=======\r\n\r\nYou will need an ANSI C compiler (like gcc) to compile this package.\r\n\r\nJust type `make', followed by `make install'.\r\n\r\nHistory\r\n=======\r\n\r\nThe main difference with version 1.0 by Paul Vixie is that this\r\nversion will not return directory names as being executables\r\nand that by default it will expand a leading \"./\" and \"~/\" to\r\nits full path on output.\r\n\r\nThe -all option has been added in example of a version of which\r\non Ultrix.  They use `-a' as option.\r\n\r\nThe --read-alias idea has been copied from a version of which by\r\nMaarten Litmaath called `which-v6', he was using `-i' as option\r\nwhich stands for `interactive'.\r\n\r\nManual page\r\n===========\r\n\r\n\r\nNAME\r\n       which - shows the full path of (shell) commands.\r\n\r\nSYNOPSIS\r\n       which [options] [--] programname [...]\r\n\r\nDESCRIPTION\r\n       Which takes one or more arguments. For each of its arguments it prints\r\n       to stdout the full path of the executables that would have been exe-\r\n       cuted when this argument had been entered at the shell prompt. It does\r\n       this by searching for an executable or script in the directories listed\r\n       in the environment variable PATH using the same algorithm as bash(1).\r\n\r\n       This man page is generated from the file which.texinfo.\r\n\r\nOPTIONS\r\n       --all, -a\r\n           Print all matching executables in PATH, not just the first.\r\n\r\n       --read-alias, -i\r\n           Read aliases from stdin, reporting matching ones on stdout. This is\r\n           useful in combination with using an alias for which itself. For\r\n           example\r\n           alias which='alias | which -i'.\r\n\r\n       --skip-alias\r\n           Ignore option `--read-alias', if any. This is useful to explicity\r\n           search for normal binaries, while using the `--read-alias' option\r\n           in an alias or function for which.\r\n\r\n       --read-functions\r\n           Read shell function definitions from stdin, reporting matching ones\r\n           on stdout. This is useful in combination with using a shell func-\r\n           tion for which itself.  For example:\r\n           which() { declare -f | which --read-functions $@ }\r\n           export -f which\r\n\r\n       --skip-functions\r\n           Ignore option `--read-functions', if any. This is useful to explic-\r\n           ity search for normal binaries, while using the `--read-functions'\r\n           option in an alias or function for which.\r\n\r\n       --skip-dot\r\n           Skip directories in PATH that start with a dot.\r\n\r\n       --skip-tilde\r\n           Skip directories in PATH that start with a tilde and executables\r\n           which reside in the HOME directory.\r\n\r\n       --show-dot\r\n           If a directory in PATH starts with a dot and a matching executable\r\n           was found for that path, then print \"./programname\" rather than the\r\n           full path.\r\n\r\n       --show-tilde\r\n           Output a tilde when a directory matches the HOME directory. This\r\n           option is ignored when which is invoked as root.\r\n       --version,-v,-V\r\n           Print version information on standard output then exit success-\r\n           fully.\r\n\r\n       --help\r\n           Print usage information on standard output then exit successfully.\r\n\r\nRETURN VALUE\r\n       Which returns the number of failed arguments, or -1 when no `program-\r\n       name' was given.\r\n\r\nEXAMPLE\r\n       The recommended way to use this utility is by adding an alias (C shell)\r\n       or shell function (Bourne shell) for which like the following:\r\n\r\n       [ba]sh:\r\n\r\n            which ()\r\n            {\r\n              (alias; declare -f) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot $@\r\n            }\r\n            export -f which\r\n\r\n       [t]csh:\r\n\r\n            alias which 'alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'\r\n\r\n       This  will  print  the readable ~/ and ./ when starting which from your\r\n       prompt, while still printing the full path when used from a script:\r\n\r\n            > which q2\r\n            ~/bin/q2\r\n            > echo `which q2`\r\n            /home/carlo/bin/q2\r\n\r\n\r\nBUGS\r\n       The HOME directory is determined by looking for  the  HOME  environment\r\n       variable,  which  aborts  when this variable doesn't exist.  Which will\r\n       consider two equivalent directories to be different when  one  of  them\r\n       contains a path with a symbolic link.\r\n\r\nAUTHOR\r\n       Carlo Wood <carlo@gnu.org>\r\n\r\nSEE ALSO\r\n       bash(1)\r\n\r\n\r\n\r\n                                                                      WHICH(1)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}